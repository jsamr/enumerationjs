<a name="top"></a>
# enumerationjs : Java-like enum for javascript/coffeescript  

![Travis build](https://travis-ci.org/sveinburne/enumerationjs.svg?branch=master)
!INCLUDE "jasmine-badge.mdpp"
 ![License](https://img.shields.io/npm/l/express.svg)
 [![GitHub version](https://badge.fury.io/gh/sveinburne%2Fenumerationjs.svg)](https://github.com/sveinburne/enumerationjs)  
*Straightforward though very flexible solution addressing the unimplemented `enum` keyword.*   

**KEY POINTS**

- *functionalities*  
  ⓘ An **enum type** `MyEnum = new Enuemrtation('MyEnum', { CONSTANT1 : descriptor1, CONSTANT2 : descriptor2 }, somePrototype);`   
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;→ is `instanceof` the `Enumeration` constructor  
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;→ is **immutable**  
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;→ can be inherited ([JS](JS.GUIDE.MD#extendyourenumerationwithprototypeinheritance) | [COFFEE](COFFEE.GUIDE.MD#extendyourenumerationwithprototypeinheritance))  
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;→ `Object.keys(MyEnum)` is `['CONSTANT1','CONSTANT2']`      
  ⓘ An **enum constant** `MyEnum.CONSTANT1`    
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;→ is `instanceof` `MyEnum`   
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;→ is **immutable**   
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;→ **inherits from `somePrototype`** ([JS](JS.GUIDE.MD#aprototypeforenumconstants) | [COFFEE](COFFEE.GUIDE.MD#aprototypeforenumconstants))       
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;→ can have **its own specific properties** via `descriptor1` ([JS](JS.GUIDE.MD#useofstructureddescriptors) | [COFFEE](COFFEE.GUIDE.MD#useofstructureddescriptors))  
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;→ is shipped with methods `id()`, `key()`, `describe()`, `type()` and `toJSON()` , see the [API](#quickapioverview)           
  ✓  Allow easy refactoring, avoiding the `if else` mess  ([JS](JS.GUIDE.MD#refactoring) | [COFFEE](COFFEE.GUIDE.MD#refactoring))   
  ✓  Lightweight **deserialization** with `MyEnum.from(identifier)` and **serialization** with `MyEnum.ENUM_CONST.toJSON()`   
     
- *integration*  
  ✓  **Rock solid** jasmine specified tests.  
  ✓  Semver.  
  ✓  Fully **CommonJS** and **AMD** compliant through a **Universal Module Definition** | since v1.3.0     
  ✓  Available for **npm**, **bower** and **Meteor**, see the [packages section](#packages)  
  ⓘ Depends on **underscore**, but you can use **lodash** if you wish. See [this section](#dependencies) for more infos.      
  ⚠  You **shall** guaranty the javascript engine is [ECMA-262 5th edition](https://people.mozilla.org/~jorendorff/es5.html) compatible, **or at least** provide the es5-shim package, see [this section](#ecmascript)      

**EXAMPLES**

> [→ COFFEE.GUIDE.MD](COFFEE.GUIDE.MD#top) for coffescript devs   
> [→ JS.GUIDE.MD](JS.GUIDE.MD#top)         for js devs         


**DOWNLOAD**
<a name="bundled"></a>
> ❗ Shipped with **underscore**, ready-to-use  
> → [COMMENTED ~ 61K](https://raw.githubusercontent.com/sveinburne/enumeration.js/master/dist/Enumeration.bd.js) | [MINIFIED ~ 30K](https://raw.githubusercontent.com/sveinburne/enumeration.js/master/dist/Enumeration.bd.min.js)

> ⚠ Assuming you can provide **underscore**, either through AMD or global variable `_`  
> → [COMMENTED ~ 8.1K](https://raw.githubusercontent.com/sveinburne/enumeration.js/master/dist/Enumeration.js) | [MINIFIED ~ 4.4K](https://raw.githubusercontent.com/sveinburne/enumeration.js/master/dist/Enumeration.min.js)

<a name="packages"></a>
**PACKAGES**

> `npm install enumerationjs`   
> `bower install enumerationjs`  
> `meteor add sveinburne:enumerationjs`

<a name="toc"></a>
**TABLE OF CONTENTS**  
!TOC

### AMD 
> dependency name is "enumerationjs"

#### UMD Behaviour
If `_` is defined global, the **enumeration.js** will be defined with **no dependency**.  
Otherwise, it will call `define` with a dependency on **underscore**  
#### Requirejs + lodash
you can map *underscore* to *lodash* to avoid an extra dependency easily :

    require.config({
      map: {
        '*': {
          'underscore': 'lodash'
        }
      }
    })

### Quick api overview

#### Enumeration.constructor
You can instantiate an enum type with the provided `Enumeration` constructor. It will take three arguments :

- `MyEnum` : the name of this enumeration, must be unique amongst other Enumeration instances.
- `enumConstants` : an object containing the set of enum constants. Each key is the enum constant name and each value is a descriptor that can either be ...
    * a **raw descriptor** i.e. a unique identifier of type string or number  ([JS](JS.GUIDE.MD#basicusagewithrawdescriptors) | [COFFEE](COFFEE.GUIDE.MD#basicusagewithrawdescriptors))      
    * a **structured descriptor** i.e. a plain object ([JS](JS.GUIDE.MD#useofstructureddescriptors) | [COFFEE](COFFEE.GUIDE.MD#useofstructureddescriptors))   
- `prototype` : [optional] a prototype all the enum constants will inherit ([JS](JS.GUIDE.MD#aprototypeforenumconstants) | [COFFEE](COFFEE.GUIDE.MD#aprototypeforenumconstants))

#### Enumeration constant 
Each **enum constant** will have the following methods :

- `key()`      : retrieve the key (`SOME_ENUM_CONST` for example)
- `id()`       : retrieve the identifier (`1000` for example)
- `type()`     : retrieve the enum type,`MyEnum` Enumeration constructor's argument
- `describe()` : return a string of the form 'key:id', useful for logging/debugging  
- `toJSON()`   : called by `JSON.stringify`, alias for `id()`, see [mdn page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#toJSON%28%29_behavior).

 ...plus the properties provided at instantiation time (inherited from `prototype` and provided by descriptors)

#### Enumeration instance aka enum type

- `from(id,throwOnFailure=false)`  : retrieve the enum constant that matches given `id`. [optional] throwOnFailure, default to false, throws an error when no id match.  
- `pretty()`                       : give a pretty description of this enum type and all its constants, useful for logging/debugging  
- `()`                             : shortcut for `pretty()`
 
#### Enumeration object

- `Enumeration.types()` : returns an array containing the `MyEnum` for each enum type. 


#### More examples
> [→ COFFEE.GUIDE.MD](COFFEE.GUIDE.MD#top) for coffescript devs   
> [→ JS.GUIDE.MD](JS.GUIDE.MD#top)         for js devs   

<a name="ecmascript"></a>
### Ecmascript compatibility

> ECMA-262 5th edition was published on December 3, 2009 

Among those specifications, the following methods must be available:
```javascript
Object.defineProperty(object,property,propertyDescriptor)
Object.freeze(object)
Object.create(prototype,propertiesDescriptors)
```
These methods prevent user from mistakenly modify any property from the enum type and its bound constants :  
**any attempt to write a read-only property [in 'strict mode' will throw an error](http://www.w3schools.com/js/js_strict.asp)**, ignored otherwise.  
**any attempt to reconfigure a non-configurable property [in 'strict mode' will throw an error](http://www.w3schools.com/js/js_strict.asp)**, ignored otherwise.     
For older browser, those methods can be polyfilled with [es5-shim](https://github.com/es-shims/es5-shim), however the write permissions will be ignored.   

### Dependencies

#### Underscore
Relies on underscore >=1.1.   
**NB** : On version 1.2 I switched to **lodash** for its optimizations and improvements, but on the other hand **underscore** appeared lighter for the bundled version, 
plus it's heavily used my meteor.

#### For lodash users

**Downloaded version**
>
ⓘ By loading lodash in a non-AMD context, a global `_` variable will be defined and it will work seamlessly  
ⓘ With **requirejs** or any other AMD loader allowing mapping, check [this section](#amd).   


**Dependency managers version**
>
ⓘ With **bower**, it seems possible by overriding underscore dependency, see [this so thread](http://stackoverflow.com/questions/24231184/bower-override-dependency)   
⚠  With **npm**, you cannot override dependencies. It is however still possible to shim `_` globally with [browserify](https://gist.github.com/malte-wessel/8a295bc604c4a0d0dbe1).   

### Changelog

Note that it the changelogs :
- `MyEnum` is any instance of `Enumeration.`
- `MyEnum.SOME_CONST` is an **enum constant** of type `MyEnum`

**v1.4.0**

- Added `MyEnum.assertSchema` to enhance support for cross engine validation (client/server) when implementation differs from server to client but you need to assert compatibility. 
- `MyEnum` is no longer all-frozen, only **enum constants** and built-in methods are. you can directly define new properties
- Added `MyEnum.toJSON` utility method, with two optional arguments to evaluate fields from prototype and functions returning non-undefined values.
- Added `MyEnum.pretty(evalFunctions=false)` optional argument to evaluate functions returning non-undefined values.
- Added `MyEnum.print(evalFunctions=false)` utility method that prints only the **enum constants** and its type to the console. Equivalent to `console.log(MyEnum.toJSON(true,evalFunctions))` 
- Added `MyEnum.print(evalFunctions=false)` utility method that prints only the **enum constants** and its type to the console. Equivalent to `console.log(MyEnum.toJSON(true,evalFunctions))` 
- Added `MyEnum.SOME_CONST.toString` to allow non-strict equality with `==` 
- Added `MyEnum.SOME_CONST.toJSON` support for serialization with **enum constants** 

**v1.3.7**

- Added changelog

**v1.3.6**  

- Fixed bug with describe() method when descriptors are structured  

**v1.3.4**  

- Meteor support    
- Added Enumeration.types() as an alias to Enumeration.list() to be semantically consistent  
 
**v1.3.2**  

- Enhanced semantic consistency  

**v1.3.0**  

- UML loader, AMD compliant  
- replaced lodash with underscore
- added `throwOnFailure` optional argument for `MyEnum.from()` fun   

**v1.2.2**  

- Fixed MyEnum() function bug  

**v1.2.0**  

- Replaced underscore with lodash  
  
**v1.0**  

- First release  


!INCLUDE "common/go-toc.mdpp"